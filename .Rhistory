# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
ext = "com.br"),
warning = function(w) data.frame(lon = NA, lat = NA))
sinistrosRecife$lon[i] <- as.numeric(result[1])
sinistrosRecife$lat[i] <- as.numeric(result[2])
sinistrosRecife$geoAddress[i] <- as.character(result[3])
}
sinistrosRecife$endereco |>
unique() |>
head()
sinistrosRecife$endereco |>
tolower() |>
unique() |>
head()
# Loop through the addresses to get the latitude and longitude of each address and add it to the
# origAddress data frame in new columns lat and lon
for(i in 1:nrow(sinistrosRecife)){
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(tolower(sinistrosRecife$endereco[i]),
output = "latlon",
source = "google",
ext = "com.br"),
warning = function(w) data.frame(lon = NA, lat = NA))
sinistrosRecife$lon[i] <- as.numeric(result[1])
sinistrosRecife$lat[i] <- as.numeric(result[2])
sinistrosRecife$geoAddress[i] <- as.character(result[3])
}
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google"),
warning = function(w) data.frame(lon = NA, lat = NA))
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
ext = ".br"),
warning = function(w) data.frame(lon = NA, lat = NA))
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
ext = "com.br"),
warning = function(w) data.frame(lon = NA, lat = NA))
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
region = "BR"),
warning = function(w) data.frame(lon = NA, lat = NA))
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google", region = BR),
warning = function(w) data.frame(lon = NA, lat = NA))
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google"),
warning = function(w) data.frame(lon = NA, lat = NA))
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google", ext = "BR"),
warning = function(w) data.frame(lon = NA, lat = NA))
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlona",
source = "google",
region = "BR"),
warning = function(w) data.frame(lon = NA, lat = NA))
# Extração Latitudes e Longitudes -----------------------------------------
# coleta, via API da Google, as latitudes e longitudes dos endereços
# da base de dados sinistrosRecife
i = 1
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
region = "BR"),
warning = function(w) data.frame(lon = NA, lat = NA))
View(result)
for(i in 1:nrow(sinistrosRecife)){
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
region = "BR"),
warning = function(w) data.frame(lon = NA, lat = NA))
sinistrosRecife$lon[i] <- as.numeric(result[1]) # aloca na nova coluna
sinistrosRecife$lat[i] <- as.numeric(result[2]) # aloca na nova coluna
}
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
region = "recife - pe, brazil"),
warning = function(w) data.frame(lon = NA, lat = NA))
# Extração Latitudes e Longitudes -----------------------------------------
# coleta, via API da Google, as latitudes e longitudes dos endereços
# da base de dados sinistrosRecife
i = 1
for(i in 1:nrow(sinistrosRecife)){
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
region = "recife - pe, brazil"),
warning = function(w) data.frame(lon = NA, lat = NA))
sinistrosRecife$lon[i] <- as.numeric(result[1]) # aloca na nova coluna
sinistrosRecife$lat[i] <- as.numeric(result[2]) # aloca na nova coluna
}
for(i in 1:nrow(sinistrosRecife)){
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
region = BR),
warning = function(w) data.frame(lon = NA, lat = NA))
sinistrosRecife$lon[i] <- as.numeric(result[1]) # aloca na nova coluna
sinistrosRecife$lat[i] <- as.numeric(result[2]) # aloca na nova coluna
}
for(i in 1:nrow(sinistrosRecife)){
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$endereco[i],
output = "latlon",
source = "google",
region = BR),
warning = function(w) data.frame(lon = NA, lat = NA))
sinistrosRecife$lon[i] <- as.numeric(result[1]) # aloca na nova coluna
sinistrosRecife$lat[i] <- as.numeric(result[2]) # aloca na nova coluna
}
# Cria arquivo .rds
export(sinistrosRecife, "bases_tratadas/sinistrosRecife.rds")
# Cria arquivo .rds
rio::export(sinistrosRecife, "bases_tratadas/sinistrosRecife.rds")
library(shiny)
library(shinythemes)
library(leaflet)
library(tidyverse)
install.packages(leaflet)
install.packages("leaflet")
library(leaflet)
a <- readRDS("C:/Users/quemu/Downloads/sinistrosRecife.rds")
getwd()
a <- readRDS("bases_tratadas/sinistrosRecife.rds")
#construção da user interface
ui <- fluidPage(theme = shinytheme("cosmo"),
navbarPage("Sinistros Recife",
tabPanel("Sinistros Recife",
top = 60, left = "auto", right = 20, bottom = "auto",
width = 330, height = "auto",draggable = TRUE,
style = "opacity: 1; z-index: 10;", # modificação z-index
leafletOutput("map1", height = "800px")#renderizar o mapa
),
tabPanel("Sinistros Recife - Cluster",
top = 60, left = "auto", right = 20, bottom = "auto",
width = 330, height = "auto",draggable = TRUE,
style = "opacity: 1; z-index: 10;", # modificação z-index
leafletOutput("map2", height = "800px")#renderizar o mapa
)
)#fim da navbarPage
)#fim da fluidpage
#constrção do serve side
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
cores<-colorFactor(palette = "viridis", # paleta de cor
a$tipo#aplicar ao objeto
)
leaflet(a)%>%#aplicando o leaflet ao nosso objeto
addTiles()%>%setView(lat=-8.0517328,lng=-34.8728813,zoom=14)%>%#determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%#adicionando um tile minimalista
addCircleMarkers( #adicionando as marcações circulares
lng=~lon, #definindo as longitudes
lat=~lat, #definindo as latitudes
fillOpacity=0.5, #definindo a transparencia
radius = 1, #tamanho do ponto
color=~cores(tipo)#defindo o parametro de cor nos markers
)%>%
addLegend( #adiciondo as legendas
'bottomleft', #posição da legenda
pal = cores, #definindo a paleta de cores
values = a$tipo, #os valores
title = "Tipo de Acidente" #titulo do Gráfico
)
})
output$map2 <- renderLeaflet({
leaflet(a)%>%#aplicando o leaflet ao nosso objeto
addTiles()%>%setView(lat=-8.0517328,lng=-34.8728813,zoom=14)%>%#determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%#adicionando um tile minimalista
addMarkers(
clusterOptions = markerClusterOptions()#executando a função por cluster
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
View(a)
View(sinistrosRecife)
# Extração Latitudes e Longitudes -----------------------------------------
# coleta, via API da Google, as latitudes e longitudes dos endereços
# da base de dados sinistrosRecife
i = 1
sinistrosRecife |>
head(50) |>
mutate(enderecoCompleto = paste0(endereco, numero, bairro)) |> View()
sinistrosRecife |>
head(50) |>
mutate(enderecoCompleto = paste0(endereco, numero, bairro, sep = ", ")) |> View()
sinistrosRecife |>
head(50) |>
mutate(enderecoCompleto = paste(endereco, numero, bairro, sep = ", ")) |> View()
sinistrosRecife |>
head(50) |>
mutate(enderecoCompleto = paste(endereco, numero, bairro, "Recife - Pernambuco", sep = ", ")) |> View()
# Base 2016
sinistrosRecife2016Raw <- read.csv2('http://dados.recife.pe.gov.br/dataset/44087d2d-73b5-4ab3-9bd8-78da7436eed1/resource/2caa8f41-ccd9-4ea5-906d-f66017d6e107/download/acidentes_2016-jan.csv', sep = ';', encoding = 'UTF-8')
# Base 2017
sinistrosRecife2017Raw <- read.csv2('http://dados.recife.pe.gov.br/dataset/44087d2d-73b5-4ab3-9bd8-78da7436eed1/resource/2caa8f41-ccd9-4ea5-906d-f66017d6e107/download/acidentes_2017-jan.csv', sep = ';', encoding = 'UTF-8')
# Base 2018
sinistrosRecife2018Raw <- read.csv2('http://dados.recife.pe.gov.br/dataset/44087d2d-73b5-4ab3-9bd8-78da7436eed1/resource/2caa8f41-ccd9-4ea5-906d-f66017d6e107/download/acidentes_2018-jan.csv', sep = ';', encoding = 'UTF-8')
# Base 2019
sinistrosRecife2019Raw <- read.csv2('http://dados.recife.pe.gov.br/dataset/44087d2d-73b5-4ab3-9bd8-78da7436eed1/resource/2caa8f41-ccd9-4ea5-906d-f66017d6e107/download/acidentes_2019-jan.csv', sep = ';', encoding = 'UTF-8')
# Base 2020
sinistrosRecife2020Raw <- read.csv2('http://dados.recife.pe.gov.br/dataset/44087d2d-73b5-4ab3-9bd8-78da7436eed1/resource/fc1c8460-0406-4fff-b51a-e79205d1f1ab/download/acidentes_2020-novo.csv', sep = ';', encoding = 'UTF-8')
# Base 2021
sinistrosRecife2021Raw <- read.csv2('http://dados.recife.pe.gov.br/dataset/44087d2d-73b5-4ab3-9bd8-78da7436eed1/resource/2caa8f41-ccd9-4ea5-906d-f66017d6e107/download/acidentes_2021-jan.csv', sep = ';', encoding = 'UTF-8')
# Join das Bases ----------------------------------------------------------
# junta as bases de dados linha a linha
sinistrosRecife <- rbind(sinistrosRecife2016Raw,
sinistrosRecife2017Raw,
sinistrosRecife2018Raw,
sinistrosRecife2019Raw,
sinistrosRecife2020Raw,
sinistrosRecife2021Raw)
# Limpando a staging area
rm(list = setdiff(ls(), "sinistrosRecife"))
# Cria uma variavel de endereço completo, com nome da rua, numero, bairro,
# cidade e estado, tornando os endereços únicos (chave)
sinistrosRecife <-
sinistrosRecife %>%
mutate(enderecoCompleto = paste(endereco, numero, bairro,
"Recife - Pernambuco", sep = ", "))
View(sinistrosRecife)
# Registro da API do Google -----------------------------------------------
API <- "AIzaSyBDaPRvTxmq4eDL4DP97qPwPaiEN0Y2z6c"
register_google(key = API)
for(i in 1:nrow(sinistrosRecife)){
# O tryCatch abaixo resolve o problema dos erros específicos que ocorrem
# nos casos 973, 1840, 2022, 2358, 2505, 3897, 4139, 4387, e 4549
result <- tryCatch(geocode(sinistrosRecife$enderecoCompleto[i],
output = "latlon",
source = "google",
region = "BR"),
warning = function(w) data.frame(lon = NA, lat = NA))
sinistrosRecife$lon[i] <- as.numeric(result[1]) # aloca na nova coluna
sinistrosRecife$lat[i] <- as.numeric(result[2]) # aloca na nova coluna
}
# Cria arquivo .rds
rio::export(sinistrosRecife, "bases_tratadas/sinistrosRecife.rds")
#construção da user interface
mapa <- fluidPage(theme = shinytheme("cosmo"),
navbarPage("Sinistros Recife",
tabPanel("Sinistros Recife",
top = 60, left = "auto", right = 20, bottom = "auto",
width = 330, height = "auto",draggable = TRUE,
style = "opacity: 1; z-index: 10;", # modificação z-index
leafletOutput("map1", height = "800px")#renderizar o mapa
),
tabPanel("Sinistros Recife - Cluster",
top = 60, left = "auto", right = 20, bottom = "auto",
width = 330, height = "auto",draggable = TRUE,
style = "opacity: 1; z-index: 10;", # modificação z-index
leafletOutput("map2", height = "800px")#renderizar o mapa
)
)#fim da navbarPage
)#fim da fluidpage
#constrção do serve side
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
cores<-colorFactor(palette = "viridis", # paleta de cor
a$tipo#aplicar ao objeto
)
leaflet(a)%>%#aplicando o leaflet ao nosso objeto
addTiles()%>%setView(lat=-8.0517328,lng=-34.8728813,zoom=14)%>%#determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%#adicionando um tile minimalista
addCircleMarkers( #adicionando as marcações circulares
lng=~lon, #definindo as longitudes
lat=~lat, #definindo as latitudes
fillOpacity=0.5, #definindo a transparencia
radius = 1, #tamanho do ponto
color=~cores(tipo)#defindo o parametro de cor nos markers
)%>%
addLegend( #adiciondo as legendas
'bottomleft', #posição da legenda
pal = cores, #definindo a paleta de cores
values = a$tipo, #os valores
title = "Tipo de Acidente" #titulo do Gráfico
)
})
output$map2 <- renderLeaflet({
leaflet(a) %>% #aplicando o leaflet ao nosso objeto
addTiles() %>% setView(lat = -8.0517328, lng = -34.8728813, zoom = 14) %>% # determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>% # adicionando um tile minimalista
addMarkers(
clusterOptions = markerClusterOptions() # executando a função por cluster
)
})
}
shinyApp(mapa, server)
shinyApp(mapa, server)
output$map2 <- renderLeaflet({
leaflet(a) %>% #aplicando o leaflet ao nosso objeto
addTiles() %>% setView(lat = -8.0517328, lng = -34.8728813, zoom = 14) %>% # determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>% # adicionando um tile minimalista
})
#constrção do serve side
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
cores<-colorFactor(palette = "viridis", # paleta de cor
a$tipo#aplicar ao objeto
)
leaflet(a)%>%#aplicando o leaflet ao nosso objeto
addTiles()%>%setView(lat=-8.0517328,lng=-34.8728813,zoom=14)%>%#determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%#adicionando um tile minimalista
addCircleMarkers( #adicionando as marcações circulares
lng=~lon, #definindo as longitudes
lat=~lat, #definindo as latitudes
fillOpacity=0.5, #definindo a transparencia
radius = 1, #tamanho do ponto
color=~cores(tipo)#defindo o parametro de cor nos markers
)%>%
addLegend( #adiciondo as legendas
'bottomleft', #posição da legenda
pal = cores, #definindo a paleta de cores
values = a$tipo, #os valores
title = "Tipo de Acidente" #titulo do Gráfico
)
})
output$map2 <- renderLeaflet({
leaflet(a) %>% #aplicando o leaflet ao nosso objeto
addTiles() %>% setView(lat = -8.0517328, lng = -34.8728813, zoom = 14) %>% # determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>% # adicionando um tile minimalista
})
}
#constrção do serve side
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
cores<-colorFactor(palette = "viridis", # paleta de cor
a$tipo#aplicar ao objeto
)
leaflet(a)%>%#aplicando o leaflet ao nosso objeto
addTiles()%>%setView(lat=-8.0517328,lng=-34.8728813,zoom=14)%>%#determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%#adicionando um tile minimalista
addCircleMarkers( #adicionando as marcações circulares
lng=~lon, #definindo as longitudes
lat=~lat, #definindo as latitudes
fillOpacity=0.5, #definindo a transparencia
radius = 1, #tamanho do ponto
color=~cores(tipo)#defindo o parametro de cor nos markers
)%>%
addLegend( #adiciondo as legendas
'bottomleft', #posição da legenda
pal = cores, #definindo a paleta de cores
values = a$tipo, #os valores
title = "Tipo de Acidente" #titulo do Gráfico
)
})
output$map2 <- renderLeaflet({
leaflet(a) %>% #aplicando o leaflet ao nosso objeto
addTiles() %>% setView(lat = -8.0517328, lng = -34.8728813, zoom = 14) %>% # determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>% # adicionando um tile minimalista
addMarkers(
clusterOptions = markerClusterOptions() # executando a função por cluster
)
})
}
#constrção do serve side
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
cores<-colorFactor(palette = "viridis", # paleta de cor
a$tipo#aplicar ao objeto
)
leaflet(a)%>%#aplicando o leaflet ao nosso objeto
addTiles()%>%setView(lat=-8.0517328,lng=-34.8728813,zoom=14)%>%#determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%#adicionando um tile minimalista
addCircleMarkers( #adicionando as marcações circulares
lng=~lon, #definindo as longitudes
lat=~lat, #definindo as latitudes
fillOpacity=0.5, #definindo a transparencia
radius = 1, #tamanho do ponto
color=~cores(tipo)#defindo o parametro de cor nos markers
)%>%
addLegend( #adiciondo as legendas
'bottomleft', #posição da legenda
pal = cores, #definindo a paleta de cores
values = a$tipo, #os valores
title = "Tipo de Acidente" #titulo do Gráfico
)
})
}
shinyApp(mapa, server)
#constrção do serve side
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
cores <- colorFactor(palette = "viridis", # paleta de cor
sinistrosRecife$tipo#aplicar ao objeto
)
leaflet(sinistrosRecife) %>% #aplicando o leaflet ao nosso objeto
addTiles()%>%setView(lat=-8.0517328,lng=-34.8728813,zoom=14)%>%#determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%#adicionando um tile minimalista
addCircleMarkers( #adicionando as marcações circulares
lng=~lon, #definindo as longitudes
lat=~lat, #definindo as latitudes
fillOpacity=0.5, #definindo a transparencia
radius = 1, #tamanho do ponto
color=~cores(tipo)#defindo o parametro de cor nos markers
)%>%
addLegend( #adiciondo as legendas
'bottomleft', #posição da legenda
pal = cores, #definindo a paleta de cores
values = a$tipo, #os valores
title = "Tipo de Acidente" #titulo do Gráfico
)
})
output$map2 <- renderLeaflet({
leaflet(sinistrosRecife) %>% #aplicando o leaflet ao nosso objeto
addTiles() %>% setView(lat = -8.0517328, lng = -34.8728813, zoom = 14) %>% # determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>% # adicionando um tile minimalista
addMarkers(
clusterOptions = markerClusterOptions() # executando a função por cluster
)
})
}
#construção da user interface
mapa <- fluidPage(theme = shinytheme("cosmo"),
navbarPage("Sinistros Recife",
tabPanel("Sinistros Recife",
top = 60, left = "auto", right = 20, bottom = "auto",
width = 330, height = "auto",draggable = TRUE,
style = "opacity: 1; z-index: 10;", # modificação z-index
leafletOutput("map1", height = "800px")#renderizar o mapa
),
tabPanel("Sinistros Recife - Cluster",
top = 60, left = "auto", right = 20, bottom = "auto",
width = 330, height = "auto",draggable = TRUE,
style = "opacity: 1; z-index: 10;", # modificação z-index
leafletOutput("map2", height = "800px")#renderizar o mapa
)
) # fim da navbarPage
) # fim da fluidpage
#constrção do serve side
server <- function(input, output, session) {
output$map1 <- renderLeaflet({
cores <- colorFactor(palette = "viridis", # paleta de cor
sinistrosRecife$tipo # aplicar ao objeto
)
leaflet(sinistrosRecife) %>% #aplicando o leaflet ao nosso objeto
addTiles() %>% setView(lat = -8.0517328, lng = -34.8728813, zoom = 14) %>% # determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>% # adicionando um tile minimalista
addCircleMarkers( # adicionando as marcações circulares
lng = ~lon, # definindo as longitudes
lat = ~lat, # definindo as latitudes
fillOpacity=0.5, # definindo a transparencia
radius = 1, # tamanho do ponto
color = ~cores(tipo) # defindo o parametro de cor nos markers
) %>%
addLegend( # adiciondo as legendas
'bottomleft', # posição da legenda
pal = cores, # definindo a paleta de cores
values = sinistrosRecife$tipo, # os valores
title = "Tipo de Acidente" #titulo do Gráfico
)
})
output$map2 <- renderLeaflet({
leaflet(sinistrosRecife) %>% #aplicando o leaflet ao nosso objeto
addTiles() %>% setView(lat = -8.0517328, lng = -34.8728813, zoom = 14) %>% # determinando o ponto start do datavis
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>% # adicionando um tile minimalista
addMarkers(
clusterOptions = markerClusterOptions() # executando a função por cluster
)
})
}
shinyApp(mapa, server)
shinyApp(mapa, server)
View(sinistrosRecife)
sinistrosRecife$bairro |>
table()
shinyApp(mapa, server)
sinistrosRecife |>
filter(!is.na(bairro))
